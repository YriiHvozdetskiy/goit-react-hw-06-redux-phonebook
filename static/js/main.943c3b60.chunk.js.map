{"version":3,"sources":["components/Filter/Filter.module.scss","redux/reducers/reducer.js","redux/store.js","components/Filter/Filter.jsx","components/Title/Title.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","App.js","index.js","components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss"],"names":["module","exports","contactsSlice","createSlice","name","initialState","contacts","items","filter","reducers","addContact","state","actions","unshift","payload","filterContacts","deleteContact","contactsReducer","reducer","contactsPersistConfig","key","storage","store","configureStore","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","Filter","dispatch","useDispatch","className","s","label","input","onChange","e","searchValue","target","value","Title","children","ContactList","useSelector","normalizedFilter","toLowerCase","includes","list","map","id","number","item","button","type","onClick","contact","toast","success","removeContact","ContactForm","useState","setName","setNumber","handleChange","form","autoComplete","onSubmit","preventDefault","currentName","find","error","handleCoincidence","nanoid","pattern","title","required","debounceTimeout","App","length","toastOptions","style","background","color","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.943c3b60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1vRE6\",\"input\":\"Filter_input__LcH9a\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  contacts: {\r\n    items: [],\r\n    filter: '',\r\n  },\r\n};\r\n\r\nconst contactsSlice = createSlice({\r\n    name: 'contacts',\r\n    initialState,\r\n    reducers: {\r\n      addContact(state, actions) { // тут потрібно отримати нове состоянія чи його змінити тому потрібні '{}'\r\n        state.contacts.items.unshift(actions.payload);\r\n      },\r\n      filterContacts(state, actions) {  // має бути саме така структура  nameActions(state, actions), БЕЗ деструктивізації\r\n        state.contacts.filter = actions.payload;\r\n      },\r\n      deleteContact(state, actions) {\r\n        state.contacts.items = actions.payload; // записуєм поверх масив бек удальоного контакта удалили ми його в ф removeContact в ContactList\r\n      },\r\n    },\r\n  })\r\n;\r\n\r\nexport const { addContact, filterContacts, deleteContact } = contactsSlice.actions; // експортуємо  actions -- в яких будем відправляти дані в reducer\r\nexport const contactsReducer = contactsSlice.reducer; // тут state i динамічні actions\r\n\r\n//=============== clean Redux ===============\r\n\r\n// import { ADD_CONTACT, DELETE_CONTACT, FILTER_CONTACTS } from '../actions/contacts-types';\r\n//\r\n// const initialState = {\r\n//   contacts: {\r\n//     items: [],\r\n//     filter: '',\r\n//   },\r\n// };\r\n//\r\n// export const contactsReducer = (state = initialState, actions) => { // actions { id, name, number }\r\n//   switch (actions.type) {\r\n//     case ADD_CONTACT: // перевіряєм type який в actions.type -- type: ADD_CONTACT,'ADD_CONTACT'\r\n//       return {\r\n//         contacts: {\r\n//           ...state.contacts, // розпиляєм попередні дані з обєкта contacts щоб не мутувати state\r\n//           items: [actions.payload, ...state.contacts.items],// так новий контакт буде дод на верх списку\r\n//         },\r\n//       };\r\n//     case FILTER_CONTACTS: // перевіряєм type який в actions.type -- type: FILTER_CONTACTS,'FILTER_CONTACTS'\r\n//       return {\r\n//         contacts: {\r\n//           ...state.contacts, // розпиляєм попередні дані з обєкта contacts щоб не мутувати state\r\n//           filter: actions.payload, // літери за якими шукаєм контакти в ContactsList\r\n//         },\r\n//       };\r\n//     case DELETE_CONTACT: // перевіряєм type який в actions.type -- type: DELETE_CONTACT,'DELETE_CONTACT'\r\n//       return {\r\n//         contacts: {\r\n//           ...state.contacts, // розпиляєм попередні дані з обєкта contacts щоб не мутувати state\r\n//           items: [...actions.payload],// розпиляєм новий відфільтрований масив БЕЗ контакта який видалили\r\n//         },\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n//\r\n","import {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { contactsReducer } from './reducers/reducer';\r\n\r\n// це щоб ігнурувало ці actions (костильок) [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\nconst middleware = (getDefaultMiddleware) =>\r\n  getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  });\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  // blacklist: ['filter'], // виключаєм свойство filter з нашого reducera з localStorage (не буде показуватися)\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development', // потрібно щоб тулзи працювали тільки в розробці\r\n});\r\n\r\n// persistor обгортка над нашим стором\r\nconst persistor = persistStore(store);\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { store, persistor };\r\n\r\n//=============== clean Redux ===============\r\n\r\n// import { persistStore, persistReducer } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\n// import { combineReducers, createStore } from '@reduxjs/toolkit';\r\n// import { contactsReducer } from './reducers/reducer';\r\n// import { devToolsEnhancer } from 'redux-devtools-extension';\r\n//\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n// };\r\n// // combineReducers потрібний щоб працював persistReducer\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n//\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n//\r\n// const store = createStore(persistedReducer, devToolsEnhancer());\r\n//\r\n// // persistor обгортка над нашим стором\r\n// const persistor = persistStore(store);\r\n//\r\n// export default { store, persistor };\r\n//\r\n","import { useDispatch } from 'react-redux';\r\nimport { filterContacts } from '../../redux/reducers/reducer'\r\nimport s from './Filter.module.scss';\r\n\r\nfunction Filter() {\r\n  const dispatch = useDispatch();\r\n\r\n  const changeFilter = e => {\r\n    const searchValue = e.target.value; // value яке вели для пошуку контакта з input\r\n    dispatch(filterContacts(searchValue)); // відправляєм в reducer\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <label className={s.label}>\r\n        Find contacts by name\r\n      </label>\r\n      <input\r\n        className={s.input}\r\n        onChange={changeFilter}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n\r\n//=============== clean Redux ===============\r\n\r\n// import { useDispatch } from 'react-redux';\r\n// import { filterContacts } from '../../redux/actions/actions';\r\n// import s from './Filter.module.scss';\r\n//\r\n// function Filter() {\r\n//   const dispatch = useDispatch();\r\n//\r\n//   const changeFilter = e => {\r\n//     const searchValue = e.target.value; // value яке вели для пошуку контакта з input\r\n//     dispatch(filterContacts(searchValue)); // відправляєм в reducer\r\n//   };\r\n//\r\n//   return (\r\n//     <>\r\n//       <label className={s.label}>\r\n//         Find contacts by name\r\n//       </label>\r\n//       <input\r\n//         className={s.input}\r\n//         onChange={changeFilter}\r\n//       />\r\n//     </>\r\n//   );\r\n// }\r\n//\r\n// export default Filter;\r\n","function Title({ children }) {\r\n  return (\r\n    <>\r\n      <h1>{children}</h1>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport toast from 'react-hot-toast';\r\nimport { deleteContact } from '../../redux/reducers/reducer';\r\nimport s from '././ContactList.module.scss';\r\n\r\nfunction ContactList() {\r\n  //TODO виправити баг коли фільтруєм список з декількох контактів і видаляєм контакт який від фільтрували, щоб зявлявся список з рештою контактів\r\n  const dispatch = useDispatch();\r\n  const items = useSelector((state) => { //в useSelector приходе глобальний  state з store\r\n    const { items, filter } = state.contacts.contacts; // деструк з raducera поля обєкта\r\n\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return items.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\r\n  });\r\n\r\n  const removeContact = id => { // отримуємо id контакта який потрібно видалити при кліку на кнопку\r\n    // створюєм новий масив БЕЗ контакта як потрібно видалити\r\n    const value = items.filter(contact => contact.id !== id);\r\n    // відправляєм новий масив в reducer в state\r\n    dispatch(deleteContact(value));\r\n    toast.success(`deleted contact`);\r\n  };\r\n\r\n  return (\r\n    // рендерем контакти з масиву items || рендерем результати пошуку\r\n    <ul className={s.list}>\r\n      {items && items.map(({ id, name, number }) => {\r\n        return (\r\n          <li className={s.item} key={id}>\r\n            <span>{name}</span>: <span>{number}</span>\r\n            <button\r\n              className={s.button}\r\n              type='button'\r\n              onClick={() => removeContact(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n\r\n//=============== clean Redux ===============\r\n\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import toast from 'react-hot-toast';\r\n// import { deleteContact } from '../../redux/actions/actions';\r\n// import s from '././ContactList.module.scss';\r\n//\r\n// function ContactList() {\r\n//   //TODO виправити баг коли фільтруєм список з декількох контактів і видаляєм контакт який від фільтрували, щоб зявлявся список з рештою контактів\r\n//   //в useSelector приходе глобальний  state з store(обєкт що повертає функ combineReducers) в якому вибераєм відповідне поле (contacts:contactsReducer),\r\n//   // де знаходиться обєкт з reducera:\r\n//   // initialState = {\r\n//   //   contacts: {\r\n//   //     items: [],\r\n//   //     filter: '',\r\n//   //   },\r\n//   // };\r\n//\r\n//   // items це вже відфільтрований масив з reducera\r\n//   // items рендере список контактів які ми додали і коли в Filter робем пошук показує результати (відфільтрований масив з результатами пошуку)\r\n//   const items = useSelector((state) => {\r\n//     const { items, filter } = state.contacts.contacts; // деструк з raducera поля обєкта\r\n//\r\n//     const normalizedFilter = filter.toLowerCase();\r\n//     return items.filter(({ name }) => name.toLowerCase().includes(normalizedFilter)); // повертаєм відфільтрований масив з результатами пошуку\r\n//   });\r\n//\r\n//   const dispatch = useDispatch();\r\n//\r\n//   const removeContact = id => { // отримуємо id контакта який потрібно видалити при кліку на кнопку\r\n//     // створюєм новий масив БЕЗ контакта як потрібно видалити\r\n//     const value = items.filter(contact => contact.id !== id);\r\n//     // відправляєм новий масив в reducer в state\r\n//     dispatch(deleteContact(value));\r\n//     toast.success(`deleted contact`);\r\n//   };\r\n//\r\n//   return (\r\n//     // рендерем контакти з масиву items || рендерем результати пошуку\r\n//     <ul className={s.list}>\r\n//       {items && items.map(({ id, name, number }) => {\r\n//         return (\r\n//           <li className={s.item} key={id}>\r\n//             <span>{name}</span>: <span>{number}</span>\r\n//             <button\r\n//               className={s.button}\r\n//               type='button'\r\n//               onClick={() => removeContact(id)}\r\n//             >\r\n//               Delete\r\n//             </button>\r\n//           </li>\r\n//         );\r\n//       })}\r\n//     </ul>\r\n//   );\r\n// }\r\n//\r\n// export default ContactList;\r\n","import toast from 'react-hot-toast';\r\nimport { DebounceInput } from 'react-debounce-input';\r\nimport { nanoid } from 'nanoid';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addContact } from '../../redux/reducers/reducer';\r\nimport s from './ContactForm.module.scss';\r\n\r\nexport const ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n  const { items } = useSelector((state) => state.contacts.contacts);\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleCoincidence = currentName => {\r\n    if (!items) return;\r\n    // якщо імя вже є в контактах повідомляєм і не даєм дод імя поки користувач не зміне його\r\n    if (items.find(({ name }) => name.toLowerCase() === currentName)) {\r\n      toast.error(`${name} is already in contacts`);\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    // перед відправкою перевіряєм чи таке імя є в списку\r\n    if (handleCoincidence(name.toLowerCase())) return;\r\n\r\n    // створюєм обєкт з даних які прийшли з форми + дод id\r\n    const contact = { id: nanoid(), name, number };\r\n    // відправляєм створений контакт через actions методом dispatch в reducer\r\n    dispatch(addContact(contact));\r\n\r\n    toast.success(`${name} added a contact`);\r\n\r\n    // обнуляєм поля input після создання контакта\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        className={s.form}\r\n        autoComplete='off'\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <>\r\n          <label className={s.label}>\r\n            Name\r\n          </label>\r\n          <DebounceInput\r\n            className={s.input}\r\n            name='name'\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            debounceTimeout={300}\r\n            onChange={handleChange}\r\n          />\r\n\r\n          {/* <input\r\n              className={s.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={handleName}\r\n              value={name}\r\n            /> */}\r\n\r\n          <label className={s.label}>\r\n            Number\r\n          </label>\r\n          <DebounceInput\r\n            className={s.input}\r\n            type='tel'\r\n            name='number'\r\n            value={number}\r\n            pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\r\n            title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\r\n            required\r\n            debounceTimeout={300}\r\n            onChange={handleChange}\r\n          />\r\n          {/* <input\r\n              className={s.input}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={handleNumber}\r\n              value={state.number}\r\n            /> */}\r\n\r\n          <button className={s.button} type='submit'>\r\n            Add contact\r\n          </button>\r\n        </>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\n//=============== clean Redux ===============\r\n\r\n// import toast from 'react-hot-toast';\r\n// import { DebounceInput } from 'react-debounce-input';\r\n// import { nanoid } from 'nanoid';\r\n// import { useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { addContact } from '../../redux/actions/actions';\r\n// import s from './ContactForm.module.scss';\r\n//\r\n// export const ContactForm = () => {\r\n//   const [name, setName] = useState('');\r\n//   const [number, setNumber] = useState('');\r\n//   const dispatch = useDispatch();\r\n//   const { items } = useSelector((state) => state.contacts.contacts);\r\n//\r\n//   const handleChange = e => {\r\n//     const { name, value } = e.target;\r\n//\r\n//     switch (name) {\r\n//       case 'name':\r\n//         setName(value);\r\n//         break;\r\n//\r\n//       case 'number':\r\n//         setNumber(value);\r\n//         break;\r\n//\r\n//       default:\r\n//         return;\r\n//     }\r\n//   };\r\n//\r\n//   const handleCoincidence = currentName => {\r\n//     if (!items) return;\r\n//     // якщо імя вже є в контактах повідомляєм і не даєм дод імя поки користувач не зміне його\r\n//     if (items.find(({ name }) => name.toLowerCase() === currentName)) {\r\n//       toast.error(`${name} is already in contacts`);\r\n//       return true;\r\n//     }\r\n//   };\r\n//\r\n//   const handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     // перед відправкою перевіряєм чи таке імя є в списку\r\n//     if (handleCoincidence(name.toLowerCase())) return;\r\n//\r\n//     // створюєм обєкт з даних які прийшли з форми + дод id\r\n//     const contact = { id: nanoid(), name, number };\r\n//     // відправляєм створений контакт через actions методом dispatch в reducer\r\n//     dispatch(addContact(contact));\r\n//\r\n//     toast.success(`${name} added a contact`);\r\n//\r\n//     // обнуляєм поля input після создання контакта\r\n//     setName('');\r\n//     setNumber('');\r\n//   };\r\n//\r\n//   return (\r\n//     <>\r\n//       <form\r\n//         className={s.form}\r\n//         autoComplete='off'\r\n//         onSubmit={handleSubmit}\r\n//       >\r\n//         <>\r\n//           <label className={s.label}>\r\n//             Name\r\n//           </label>\r\n//           <DebounceInput\r\n//             className={s.input}\r\n//             name='name'\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//             value={name}\r\n//             debounceTimeout={300}\r\n//             onChange={handleChange}\r\n//           />\r\n//\r\n//           {/* <input\r\n//               className={s.input}\r\n//               type=\"text\"\r\n//               name=\"name\"\r\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//               required\r\n//               onChange={handleName}\r\n//               value={name}\r\n//             /> */}\r\n//\r\n//           <label className={s.label}>\r\n//             Number\r\n//           </label>\r\n//           <DebounceInput\r\n//             className={s.input}\r\n//             type='tel'\r\n//             name='number'\r\n//             value={number}\r\n//             pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\r\n//             title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\r\n//             required\r\n//             debounceTimeout={300}\r\n//             onChange={handleChange}\r\n//           />\r\n//           {/* <input\r\n//               className={s.input}\r\n//               type=\"tel\"\r\n//               name=\"number\"\r\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//               required\r\n//               onChange={handleNumber}\r\n//               value={state.number}\r\n//             /> */}\r\n//\r\n//           <button className={s.button} type='submit'>\r\n//             Add contact\r\n//           </button>\r\n//         </>\r\n//       </form>\r\n//     </>\r\n//   );\r\n// };\r\n//\r\n","import { Toaster } from 'react-hot-toast';\r\nimport { useSelector } from 'react-redux';\r\nimport Filter from 'components/Filter/Filter';\r\nimport Title from './components/Title/Title';\r\nimport ContactList from 'components/ContactList/ContactList';\r\nimport { ContactForm } from './components/ContactForm/ContactForm';\r\n\r\nexport function App() {\r\n  const { items } = useSelector((state) =>state.contacts.contacts);\r\n\r\n  return (\r\n    <>\r\n      <Title>Phonebook</Title>\r\n      <ContactForm />\r\n      {/*рендерем Filter,Title тільки тоді коли щось є в state із reducer*/}\r\n      {items.length !== 0 && <Title>Contacts</Title>}\r\n      {items.length !== 0 && <Filter />}\r\n      <ContactList />\r\n      <Toaster\r\n        toastOptions={{\r\n          success: {\r\n            style: {\r\n              background: 'green',\r\n              color: '#fff',\r\n            },\r\n          },\r\n          error: {\r\n            style: {\r\n              background: 'red',\r\n              color: '#fff',\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n//=============== clean Redux ===============\r\n\r\n// import { Toaster } from 'react-hot-toast';\r\n// import { useSelector } from 'react-redux';\r\n// import Filter from 'components/Filter/Filter';\r\n// import Title from './components/Title/Title';\r\n// import ContactList from 'components/ContactList/ContactList';\r\n// import { ContactForm } from './components/ContactForm/ContactForm';\r\n//\r\n// export function App() {\r\n//   const { items } = useSelector((state) => (state.contacts.contacts));\r\n//\r\n//   return (\r\n//     <>\r\n//       <Title>Phonebook</Title>\r\n//       <ContactForm />\r\n//       <Title>Contacts</Title>\r\n//       {/*рендерем Filter тільки тоді коли щось є в state із reducer*/}\r\n//       {items.length !== 0 && <Filter />}\r\n//       <ContactList />\r\n//       <Toaster\r\n//         toastOptions={{\r\n//           success: {\r\n//             style: {\r\n//               background: 'green',\r\n//               color: '#fff',\r\n//             },\r\n//           },\r\n//           error: {\r\n//             style: {\r\n//               background: 'red',\r\n//               color: '#fff',\r\n//             },\r\n//           },\r\n//         }}\r\n//       />\r\n//     </>\r\n//   );\r\n// }\r\n//\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport './index.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n//=============== clean Redux ===============\r\n\r\n// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n// import { Provider } from 'react-redux';\r\n// import store from './redux/store';\r\n// import './index.css';\r\n// import { App } from './App';\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <Provider store={store.store}>\r\n//       <PersistGate loading={null} persistor={store.persistor}>\r\n//         <App />\r\n//       </PersistGate>\r\n//     </Provider>\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root'),\r\n// );\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2aQjm\",\"button\":\"ContactForm_button__2KRaK\",\"label\":\"ContactForm_label__BAyTn\",\"input\":\"ContactForm_input__3ChMC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__27qi7\",\"item\":\"ContactList_item__wMJ2j\",\"button\":\"ContactList_button__dG8hB\"};"],"sourceRoot":""}